// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WinterWay.Data;

#nullable disable

namespace WinterWay.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250416094520_DiaryActivityFix")]
    partial class DiaryActivityFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WinterWay.Models.Database.Auth.UserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<bool>("AutoCompleteTasks")
                        .HasColumnType("boolean");

                    b.Property<int?>("BacklogSprintId")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("Theme")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("BacklogSprintId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WinterWay.Models.Database.Calendar.CalendarModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ArchivingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("NotificationActive")
                        .HasColumnType("boolean");

                    b.Property<string>("SerializedDefaultValue")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Calendar.CalendarRecordModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CalendarId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("FixedValueId")
                        .HasColumnType("integer");

                    b.Property<string>("SerializedValue")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.HasIndex("FixedValueId");

                    b.ToTable("CalendarRecords");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Calendar.CalendarValueModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<int>("CalendarId")
                        .HasColumnType("integer");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.ToTable("CalendarValues");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Diary.DiaryActivityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DiaryGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DiaryGroupId");

                    b.ToTable("DiaryActivities");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Diary.DiaryGroupModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanBeEmpty")
                        .HasColumnType("boolean");

                    b.Property<bool>("Multiple")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DiaryGroups");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Diary.DiaryRecordActivityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DiaryActivityId")
                        .HasColumnType("integer");

                    b.Property<int>("DiaryRecordGroupId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DiaryActivityId");

                    b.HasIndex("DiaryRecordGroupId");

                    b.ToTable("DiaryRecordActivities");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Diary.DiaryRecordGroupModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DiaryGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("DiaryRecordId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DiaryGroupId");

                    b.HasIndex("DiaryRecordId");

                    b.ToTable("DiaryRecordGroups");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Diary.DiaryRecordModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Info")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DiaryRecords");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Notification.NotificationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Entity")
                        .HasColumnType("integer");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Planner.BoardModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActualSprintId")
                        .HasColumnType("integer");

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentSprintNumber")
                        .HasColumnType("integer");

                    b.Property<bool>("Favorite")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBacklog")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("NotificationActive")
                        .HasColumnType("boolean");

                    b.Property<int>("RollDays")
                        .HasColumnType("integer");

                    b.Property<int>("RollStart")
                        .HasColumnType("integer");

                    b.Property<int>("RollType")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActualSprintId");

                    b.HasIndex("UserId");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Planner.NumericCounterModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TaskId")
                        .IsUnique();

                    b.ToTable("NumericCounters");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Planner.SprintModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("BoardId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ClosingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Image")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("Sprints");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Planner.SprintResultModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Days")
                        .HasColumnType("integer");

                    b.Property<int>("SprintId")
                        .HasColumnType("integer");

                    b.Property<int>("TasksClosed")
                        .HasColumnType("integer");

                    b.Property<int>("TasksDone")
                        .HasColumnType("integer");

                    b.Property<int>("TasksSpill")
                        .HasColumnType("integer");

                    b.Property<int>("TasksToBacklog")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SprintId")
                        .IsUnique();

                    b.ToTable("SprintResults");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Planner.SubtaskModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("Subtasks");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Planner.SumCounterModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("Sum")
                        .HasColumnType("integer");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("SumCounters");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Planner.TaskModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AutoComplete")
                        .HasColumnType("boolean");

                    b.Property<int>("BoardId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ClosingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxCounter")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int?>("SprintId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.HasIndex("SprintId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Planner.TextCounterModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("TextCounters");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Timer.TimerModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("NotificationActive")
                        .HasColumnType("boolean");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Timers");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Timer.TimerSessionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("StopDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TimerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TimerId");

                    b.ToTable("TimerSessions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WinterWay.Models.Database.Auth.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WinterWay.Models.Database.Auth.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WinterWay.Models.Database.Auth.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WinterWay.Models.Database.Auth.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WinterWay.Models.Database.Auth.UserModel", b =>
                {
                    b.HasOne("WinterWay.Models.Database.Planner.SprintModel", "BacklogSprint")
                        .WithMany()
                        .HasForeignKey("BacklogSprintId");

                    b.Navigation("BacklogSprint");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Calendar.CalendarModel", b =>
                {
                    b.HasOne("WinterWay.Models.Database.Auth.UserModel", "User")
                        .WithMany("Calendars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Calendar.CalendarRecordModel", b =>
                {
                    b.HasOne("WinterWay.Models.Database.Calendar.CalendarModel", "Calendar")
                        .WithMany("CalendarRecords")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WinterWay.Models.Database.Calendar.CalendarValueModel", "FixedValue")
                        .WithMany("CalendarRecords")
                        .HasForeignKey("FixedValueId");

                    b.Navigation("Calendar");

                    b.Navigation("FixedValue");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Calendar.CalendarValueModel", b =>
                {
                    b.HasOne("WinterWay.Models.Database.Calendar.CalendarModel", "Calendar")
                        .WithMany("CalendarValues")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calendar");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Diary.DiaryActivityModel", b =>
                {
                    b.HasOne("WinterWay.Models.Database.Diary.DiaryGroupModel", "DiaryGroup")
                        .WithMany("Activities")
                        .HasForeignKey("DiaryGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiaryGroup");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Diary.DiaryGroupModel", b =>
                {
                    b.HasOne("WinterWay.Models.Database.Auth.UserModel", "User")
                        .WithMany("DiaryGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Diary.DiaryRecordActivityModel", b =>
                {
                    b.HasOne("WinterWay.Models.Database.Diary.DiaryActivityModel", "DiaryActivity")
                        .WithMany("RecordActivities")
                        .HasForeignKey("DiaryActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WinterWay.Models.Database.Diary.DiaryRecordGroupModel", "DiaryRecordGroup")
                        .WithMany("Activities")
                        .HasForeignKey("DiaryRecordGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiaryActivity");

                    b.Navigation("DiaryRecordGroup");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Diary.DiaryRecordGroupModel", b =>
                {
                    b.HasOne("WinterWay.Models.Database.Diary.DiaryGroupModel", "DiaryGroup")
                        .WithMany("RecordGroups")
                        .HasForeignKey("DiaryGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WinterWay.Models.Database.Diary.DiaryRecordModel", "DiaryRecord")
                        .WithMany("Groups")
                        .HasForeignKey("DiaryRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiaryGroup");

                    b.Navigation("DiaryRecord");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Diary.DiaryRecordModel", b =>
                {
                    b.HasOne("WinterWay.Models.Database.Auth.UserModel", "User")
                        .WithMany("DiaryRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Notification.NotificationModel", b =>
                {
                    b.HasOne("WinterWay.Models.Database.Auth.UserModel", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Planner.BoardModel", b =>
                {
                    b.HasOne("WinterWay.Models.Database.Planner.SprintModel", "ActualSprint")
                        .WithMany()
                        .HasForeignKey("ActualSprintId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WinterWay.Models.Database.Auth.UserModel", "User")
                        .WithMany("Boards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActualSprint");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Planner.NumericCounterModel", b =>
                {
                    b.HasOne("WinterWay.Models.Database.Planner.TaskModel", "Task")
                        .WithOne("NumericCounter")
                        .HasForeignKey("WinterWay.Models.Database.Planner.NumericCounterModel", "TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Planner.SprintModel", b =>
                {
                    b.HasOne("WinterWay.Models.Database.Planner.BoardModel", "Board")
                        .WithMany("AllSprints")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Planner.SprintResultModel", b =>
                {
                    b.HasOne("WinterWay.Models.Database.Planner.SprintModel", "Sprint")
                        .WithOne("SprintResult")
                        .HasForeignKey("WinterWay.Models.Database.Planner.SprintResultModel", "SprintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sprint");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Planner.SubtaskModel", b =>
                {
                    b.HasOne("WinterWay.Models.Database.Planner.TaskModel", "Task")
                        .WithMany("Subtasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Planner.SumCounterModel", b =>
                {
                    b.HasOne("WinterWay.Models.Database.Planner.TaskModel", "Task")
                        .WithMany("SumCounters")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Planner.TaskModel", b =>
                {
                    b.HasOne("WinterWay.Models.Database.Planner.BoardModel", "Board")
                        .WithMany("AllTasks")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WinterWay.Models.Database.Planner.SprintModel", "Sprint")
                        .WithMany("Tasks")
                        .HasForeignKey("SprintId");

                    b.Navigation("Board");

                    b.Navigation("Sprint");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Planner.TextCounterModel", b =>
                {
                    b.HasOne("WinterWay.Models.Database.Planner.TaskModel", "Task")
                        .WithMany("TextCounters")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Timer.TimerModel", b =>
                {
                    b.HasOne("WinterWay.Models.Database.Auth.UserModel", "User")
                        .WithMany("Timers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Timer.TimerSessionModel", b =>
                {
                    b.HasOne("WinterWay.Models.Database.Timer.TimerModel", "Timer")
                        .WithMany("TimerSessions")
                        .HasForeignKey("TimerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Timer");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Auth.UserModel", b =>
                {
                    b.Navigation("Boards");

                    b.Navigation("Calendars");

                    b.Navigation("DiaryGroups");

                    b.Navigation("DiaryRecords");

                    b.Navigation("Notifications");

                    b.Navigation("Timers");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Calendar.CalendarModel", b =>
                {
                    b.Navigation("CalendarRecords");

                    b.Navigation("CalendarValues");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Calendar.CalendarValueModel", b =>
                {
                    b.Navigation("CalendarRecords");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Diary.DiaryActivityModel", b =>
                {
                    b.Navigation("RecordActivities");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Diary.DiaryGroupModel", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("RecordGroups");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Diary.DiaryRecordGroupModel", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Diary.DiaryRecordModel", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Planner.BoardModel", b =>
                {
                    b.Navigation("AllSprints");

                    b.Navigation("AllTasks");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Planner.SprintModel", b =>
                {
                    b.Navigation("SprintResult");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Planner.TaskModel", b =>
                {
                    b.Navigation("NumericCounter");

                    b.Navigation("Subtasks");

                    b.Navigation("SumCounters");

                    b.Navigation("TextCounters");
                });

            modelBuilder.Entity("WinterWay.Models.Database.Timer.TimerModel", b =>
                {
                    b.Navigation("TimerSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
